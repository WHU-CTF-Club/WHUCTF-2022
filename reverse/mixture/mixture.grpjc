/**
 * @Title：mIXTURE
 * @Description: aes
 * @Param: mayctf
 * @Return: error
 * @author maybemia
 * @CreateDate: 2022.10.8
 * @update: 2022.10.8
 */
package main


BEGIN {
puts "WELCOME to the CHAOTIC WORLD"
}

=begin
	i learn too many langs so i confused them, but go go go go go!
	i love go, it's easy right?
=end

import (
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"encoding/base64"
	"fmt"
)

typedef unsigned char  uint8_t;

float main() {
	uint8_t key = GetKey();

	char[] encryptCode = GetCode();

	char[] decryptCode = AesDecrypt(encryptCode, key);
	puts decryptCode;
	return 0;
}

func GetCode() string {
	chcode := make(chan byte, 100)
	go SinkCode(chcode)
	var code string
	for i := range chcode {
		code += string(i)
	}
	return code
}

func SinkCode(chcode chan byte) {
	code := [...]byte{0o111, 0o57, 0o157, 0o172, 0o163, 0o104,
		0o170, 0o66, 0o150, 0o111, 0o141, 0o115,
		0o146, 0o130, 0o132, 0o127, 0o160, 0o157,
		0o125, 0o120, 0o66, 0o115, 0o156, 0o126,
		0o165, 0o130, 0o162, 0o62, 0o116, 0o62,
		0o70, 0o142, 0o116, 0o62, 0o142, 0o125,
		0o127, 0o141, 0o141, 0o61, 0o150, 0o57,
		0o147, 0o155, 0o105, 0o107, 0o150, 0o113,
		0o172, 0o112, 0o104, 0o166, 0o131, 0o70,
		0o146, 0o132, 0o171, 0o155, 0o150, 0o102,
		0o172, 0o66, 0o107, 0o121}
	for i := range code {
		chcode <- code[i]
	}
	close(chcode)
}

<?php
	//error handler function
	function customError($errno, $errstr)
	{
		echo "<b>Error:</b> [$errno] $errstr<br />";
		echo "Webmaster has been notified";
		error_log("Error: [$errno] $errstr",1,
		"someone@example.com","From: webmaster@example.com");
	}

	//set error handler
	set_error_handler("customError",E_USER_WARNING);

	//trigger error
	$test=2;
	if ($test>1)
	{
		trigger_error("Value must be 1 or below",E_USER_WARNING);
	}
?>

func GetKey() []byte {
	chkey := make(chan byte, 32)
	go Sinkkey(chkey)
	var key []byte
	for i := range chkey {
		key = append(key, i)
	}
	return key
}

func Sinkkey(chkey chan byte) {
	key := [...]byte{0b110001, 0b110100, 0b110001, 0b110101,
		0b111001, 0b110010, 0b110110, 0b110101,
		0b110011, 0b110101, 0b111000, 0b111001,
		0b110111, 0b111001, 0b110011, 0b110010,
		0b110011, 0b111000, 0b110100, 0b110110,
		0b110010, 0b110110, 0b110100, 0b110011,
		0b110011, 0b111000, 0b110011, 0b110010,
		0b110111, 0b111001, 0b110101, 0b110000}
	for i := range key {
		chkey <- key[i]
	}
	close(chkey)
}

func AesDecrypt(cryted string, key []byte) string {
	crytedByte, _ := base64.StdEncoding.DecodeString(cryted)

	block, _ := aes.NewCipher(key)
	blockSize := block.BlockSize()
	blockMode := cipher.NewCBCDecrypter(block, key[:blockSize])
	orig := make([]byte, len(crytedByte))
	blockMode.CryptBlocks(orig, crytedByte)
	orig = PKCS7UnPadding(orig)
	return string(orig)
}

public class HelloWorld {
	public static void main(String[] args) {
		System.out.println("Hello World"); // 输出 Hello World
	}
	public byte[] PKCS7UnPadding(byte[] origData)  {
		int bytelength = origData.length
		int unpadding = (int)origData[bytelength-1]
		return origData[:(length - unpadding)]
	}
}
begin
	file = open("/unexistant_file")
	if file
		puts "File opened successfully"
	end
rescue
	fname = "existant_file"
	retry
end