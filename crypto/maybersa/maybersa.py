from Crypto.Util.number import getPrime as getprime ,long_to_bytes,bytes_to_long,inverse
from miasecret import flag,p,q
from sympy import isprime,nextprime
import random
import gmpy2


m = bytes_to_long(flag)
n = p * q
g = n + 1
r = random.randint(1,n)

assert(gmpy2.gcd(n,r)==1)

mod = pow(n,2)
a = pow(g, m, mod) % mod
b = pow(r, n, mod) % mod
c = a * b % mod

print ("c=", c)
print ("n=", n)

#c= 1726451157466076433792836196664085910979187016091203310065720429902133572806608113284818027976972190830033290122505577365602531862757450336358643162255821060574358592539799816885970433458408073145090775789065027821803347481834992353713744451853547019182346795544517493138753886389569573107421069710550196774306827161541122709173109834262231098739744078195243391364660744900708109250412707344274544497714183635751450797713917269730241444303399176795175532013203836751964156008402156770232454876185312418767444252495415626026403381106932726330651046682802405218801215363746553285724723893152351473588202746739879107018
#n= 86324454927461657860007410096336840120979839503674904701948712657586983855807988669560143211912037323769847108631053790908388282060017418955323734615211515597325512546062852172016400460654196227703541549912619998323486704517632234662974095606978779497089776947742868040584904963272448129397635067619098325773