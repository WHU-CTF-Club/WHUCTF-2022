# -*- coding: utf-8 -*-
def round_add(a, b):
    f = lambda x, y: x + y - 2 * (x & y)
    res = ''
    for i in range(len(a)):
        res += chr(f(ord(a[i]), ord(b[i])))
    return res


def permutate(table, block):
    return list(map(lambda x: block[x], table))


def string_to_bits(data):
    data = [ord(c) for c in data]
    l = len(data) * 8
    result = [0] * l
    pos = 0
    for ch in data:
        for i in range(0, 8):
            result[(pos << 3) + i] = (ch >> i) & 1
        pos += 1
    return result

s_box = [0x37, 0x85, 0x8a, 0x53, 0x10, 0x49, 0xbb, 0x54, 0x92, 0x1e, 0x5f, 0x15, 0x94, 0x3f, 0x41, 0xbd, 0xbc, 0x97, 0x49, 0xa1, 0x79, 0x3f, 0xa1, 0x5b, 0x25, 0x18, 0x7e, 0x6b, 0x57, 0x1e, 0x75, 0xb9, 0x28, 0x5a, 0x0, 0x2a, 0x8c, 0x46, 0x56, 0x0, 0x2a, 0x96, 0x36, 0x16, 0x90, 0x99, 0x24, 0x5a, 0x95, 0x36, 0x9c, 0x8, 0x3b, 0x28, 0x6e, 0x38, 0x1, 0x54, 0x67, 0x16, 0x41, 0x11, 0xbe, 0x29, 0x63, 0x97, 0x77, 0x7c, 0x44, 0x11, 0xa6, 0x7d, 0x5f, 0x41, 0x69, 0x85, 0x31, 0x13, 0x8a, 0x1d, 0x6e, 0x7, 0x51, 0x86, 0x46, 0x57, 0xb4, 0x4e, 0xaf, 0x6c, 0x1a, 0x79, 0x4a, 0x1d, 0x44, 0xa2, 0x8e, 0xb1, 0x8f, 0x56, 0x81, 0x65, 0x75, 0x29, 0x39, 0x22, 0xb1, 0x67, 0x3d, 0x87, 0xbf, 0x4a, 0x45, 0x93, 0x5a, 0x31, 0x87, 0x7c, 0x6a, 0x13, 0x59, 0x26, 0x15, 0x29, 0x11, 0x9b, 0x53, 0x26, 0x9f, 0xb3, 0x13, 0x9d, 0x44, 0x69, 0x97, 0xa6, 0xab, 0x7a, 0xb3, 0x72, 0x34, 0xb7, 0x59, 0x6b, 0x71, 0x41, 0xa1, 0x8d, 0x12, 0x79, 0x5f, 0x4, 0x5f, 0x65, 0x51, 0x9c, 0x11, 0xbe, 0x26, 0x54, 0x9, 0xab, 0xb4, 0x3b, 0x2d, 0x8, 0x22, 0x59, 0x4b, 0xa4, 0xbe, 0x8c, 0x6, 0x29, 0xbc, 0x4d, 0xa5, 0x69, 0x5, 0x6b, 0x1f, 0xb7, 0x6b, 0x8d, 0x42, 0x3f, 0xa, 0x9, 0x7d, 0x32, 0x2, 0x99, 0x9c, 0xa2, 0xba, 0x4c, 0x9e, 0x99, 0x75, 0x9, 0x4d, 0x9c, 0xb, 0x91, 0xc, 0xa9, 0x34, 0x39, 0xa1, 0x7, 0x9e, 0x6e, 0xbf, 0x2b, 0x52, 0xba, 0x31, 0x66, 0xa6, 0x1f, 0x29, 0x5, 0xbd, 0x1b]

def generate(o):
    k = permutate(s_box, o)
    b = []
    for i in range(0, len(k), 7):
        b.append(k[i:i + 7] + [1])
    c = []
    for i in range(32):
        pos = 0
        x = 0
        for j in b[i]:
            x += (j << pos)
            pos += 1
        c.append((0x10001 ** x) % (0x7f))
    return c


class M1aES:
    def __init__(self, key):
        if (len(key) != 24 or isinstance(key, bytes) == False):
            raise Exception("key must be 24 bytes long")
        self.key = key
        self.gen_subkey()

    def gen_subkey(self):
        o = string_to_bits(self.key)
        k = []
        for i in range(8):
            o = generate(o)
            k.extend(o)
            o = string_to_bits([chr(c) for c in o[0:24]])
        self.Kn = []
        for i in range(32):
            self.Kn.append(map(chr, k[i * 8: i * 8 + 8]))
        return

    def encrypt(self, plaintext):
        if (len(plaintext) % 16 != 0 or isinstance(plaintext, bytes) == False):
            raise Exception("plaintext must be a multiple of 16 in length")
        res = ''
        for i in range(len(plaintext) / 16):
            block = plaintext[i * 16:(i + 1) * 16]
            L = block[:8]
            R = block[8:]
            for round_cnt in range(32):
                L, R = R, (round_add(L, self.Kn[round_cnt]))
            L, R = R, L
            res += L + R
        return res





